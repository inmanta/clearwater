import ip::services
import apt
import ip
import dns
import param
import exec
import logging

entity ClearWater:
    string public_domain
    string private_domain
    bool create_dns_records=false
    ip::ip[] dns_servers

    number base_number=6505550000
    number number_cnt=1000
end

implement ClearWater using std::none

entity Host extends ip::Host:

end
implement Host using std::hostDefaults, privateIP

Host host_private [0:1] -- [1] ip::IP private_ip
Host host_public  [0:1] -- [0:1] ip::IP public_ip

implementation privateIP for Host:
    self.private_ip = ip::IP(v4 = self.ip)
end

Homer homer         [0:] -- [1] ClearWater clearwater
Ellis ellis         [0:] -- [1] ClearWater clearwater
Homestead homestead [0:] -- [1] ClearWater clearwater
Bono bono           [0:] -- [1] ClearWater clearwater
Ralf ralf           [0:] -- [1] ClearWater clearwater
Sprout sprout       [0:] -- [1] ClearWater clearwater
Host hosts          [0:] -- [1] ClearWater clearwater

dns::Zone public_zone [0:1] -- [0:1] ClearWater clearwater_public
dns::Zone private_zone [0:1] -- [0:1] ClearWater clearwater_private

entity ClearwaterService extends ip::services::Server:
    string instance_name
end

apt::Repository _repo [1] -- [0:] ClearwaterService cws

# Use this package as synchronisation point
std::Package cw_mgmt [1] -- [0:] ClearwaterService cws
std::File local_cfg [1] -- [0:] ClearwaterService cws

entity Homer extends ClearwaterService:

end

entity Ellis extends ClearwaterService:

end

entity Homestead extends ClearwaterService:

end

entity Bono extends ClearwaterService:

end

entity Ralf extends ClearwaterService:

end

entity Sprout extends ClearwaterService:
    bool memento=true
end

implementation clearwaterService for ClearwaterService:
    self._repo = apt::Repository(host=host, name="clearwater", release="binary/", repo="", base_url="http://repo.cw-ngv.com/stable")

    std::DefaultDirectory(host=host, path="/etc/clearwater")
    f_c = std::ConfigFile(host=host, path="/etc/clearwater/local_config",
                          content=std::template("clearwater/local_config.template"))
    self.local_cfg = f_c

    # This package already starts stuff so make sure that the config fiel is already there.
    p_mgmt = std::Package(host=host, name="clearwater-management", state="installed", requires=f_c)
    self.cw_mgmt = p_mgmt

    self.clearwater.hosts = self.host

    # Sometimes the etc state dir is not created
    std::Directory(host=host, path="/var/lib/clearwater-etcd", owner="clearwater-etcd", group="clearwater-etcd", mode="770",
                   requires=p_mgmt)

    # Only update these when clearwater packages have been installed
    f_1 = std::ConfigFile(host=host, path="/etc/dnsmasq.d/resolv.conf", content=std::template("clearwater/dnsmasq.template"), 
                          reload=true, requires=p_mgmt)
    f_2 = std::ConfigFile(host=host, path="/etc/default/dnsmasq", content=std::template("clearwater/dnsmasq.default"),
                          reload=true, requires=p_mgmt)
    std::Service(host=host, name="dnsmasq", state="running", requires=[f_1, f_2], onboot=true)
end

implementation chronos for ClearwaterService:
    std::DefaultDirectory(host=host, path="/etc/chronos")
    f_c = std::ConfigFile(host=host, path="/etc/chronos/chronos.conf", content=std::template("clearwater/chronos.tmpl"))
end

## Homer
implementation homer for Homer:
    std::Package(host=host, name="homer-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)

    logging::LogDir(host=host, name="homer", path="/var/log/homer", matches="homer_(?P<date>\d+)T(?P<time>\d+)Z.txt",
                    priority=["date", "time"], type="clearwater")
end

implementation homerDNS for Homer:
    dns::A(zone=clearwater.private_zone, resource="homer", ipaddress=host.private_ip.v4)
end

implement Homer using homer, clearwaterService
implement Homer using homerDNS when clearwater.create_dns_records

## Ellis
implementation ellis for Ellis:
    p = std::Package(host=host, name="ellis-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)

    logging::LogDir(host=host, name="ellis", path="/var/log/ellis", matches="ellis_(?P<date>\d+)T(?P<time>\d+)Z.txt",
                    priority=["date", "time"], type="clearwater")

    # generate secrets
    signup_key=std::generate_password("cw_signup_key")
    turn_workaround=std::generate_password("cw_turn_workaround")
    ellis_api_key=std::generate_password("cw_ellis_api_key")
    ellis_cookie_key=std::generate_password("cw_ellis_cookie_key")

    # report config information to dashboard
    param::report("ellis", "http://{{ host.public_ip.v4 }}/")
    param::report("signup key", signup_key)

    # setup shared config
    f = std::ConfigFile(host=host, path="/etc/clearwater/shared_config",
                        content=std::template("clearwater/shared_config.template"),
                        requires=p, reload=true)
    ccs = std::ConfigFile(host=host, path="/usr/bin/cw_config_setup", content=std::source("clearwater/config_setup.sh"),
                          mode=755)
    config = exec::Run(host=host, command="/usr/bin/cw_config_setup", requires=[f, ccs])

    # provision telephone numbers (run this everytime, it is idempotent
    exec::Run(host=host, command="/usr/share/clearwater/ellis/env/bin/python create_numbers.py --start {{ clearwater.base_number }} --count {{ clearwater.number_cnt }}",
              cwd="/usr/share/clearwater/ellis/src/metaswitch/ellis/tools/", requires=[config])
end

implementation ellisDNS for Ellis:
    dns::A(zone=clearwater.private_zone, resource="ellis", ipaddress=host.private_ip.v4)
    dns::A(zone=clearwater.public_zone, resource="ellis", ipaddress=host.public_ip.v4)
end

implement Ellis using ellis, clearwaterService
implement Ellis using ellisDNS when clearwater.create_dns_records

## Homestead
implementation homestead for Homestead:
    std::Package(host=host, name="homestead-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)
    std::Package(host=host, name="clearwater-prov-tools", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)
end

implementation homesteadDNS for Homestead:
    dns::A(zone=clearwater.private_zone, resource="hs", ipaddress=host.private_ip.v4)
end

implement Homestead using homestead, clearwaterService
implement Homestead using homesteadDNS when clearwater.create_dns_records

## Bono
implementation bono for Bono:
    std::Package(host=host, name="bono-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)
    std::Package(host=host, name="clearwater-snmp-handler-bono", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)
    std::Package(host=host, name="restund", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)

    logging::LogDir(host=host, name="bono", path="/var/log/bono", matches="bono_(?P<date>\d+)T(?P<time>\d+)Z.txt",
                    priority=["date", "time"], type="clearwater")
end

implementation bonoDNS for Bono:
    dns::A(zone=clearwater.private_zone, resource="bono", ipaddress=host.private_ip.v4)
    dns::Record(zone=clearwater.private_zone, resource="_sip._tcp", record_type="SRV", value="0 0 5060 {{host.name}}.")

    dns::A(zone=clearwater.public_zone, resource="@", ipaddress=host.public_ip.v4)
    public_name = std::replace(host.name, clearwater.private_domain, clearwater.public_domain)
    dns::A(zone=clearwater.public_zone, resource="{{ public_name }}.", ipaddress=host.public_ip.v4)

    dns::Record(zone=clearwater.public_zone, resource="_sip._tcp", record_type="SRV", value="0 0 5060 {{public_name}}.")
    dns::Record(zone=clearwater.public_zone, resource="_sip._udp", record_type="SRV", value="0 0 5060 {{public_name}}.")
end

implement Bono using bono, clearwaterService
implement Bono using bonoDNS when clearwater.create_dns_records

## Ralf
implementation ralf for Ralf:
    std::Package(host=host, name="ralf-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)
    logging::LogDir(host=host, name="ralf", path="/var/log/ralf", matches="ralf_(?P<date>\d+)T(?P<time>\d+)Z.txt",
                    priority=["date", "time"], type="clearwater")
end

implementation ralfDNS for Ralf:
    dns::A(zone=clearwater.private_zone, resource="ralf", ipaddress=host.private_ip.v4)
end

implement Ralf using ralf, clearwaterService, chronos
implement Ralf using ralfDNS when clearwater.create_dns_records

## Sprout
implementation sprout for Sprout:
    std::Package(host=host, name="sprout-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)

    logging::LogDir(host=host, name="sprout", path="/var/log/sprout", matches="sprout_(?P<date>\d+)T(?P<time>\d+)Z.txt",
                    priority=["date", "time"], type="clearwater")
end

implementation sproutMemento for Sprout:
    std::Package(host=host, name="memento-node", state="installed", provides=self.cw_mgmt, requires=self.local_cfg)
end

implementation sproutDNS for Sprout:
    dns::A(zone=clearwater.private_zone, resource="sprout", ipaddress=host.private_ip.v4)
    dns::A(zone=clearwater.private_zone, resource="scscf.sprout", ipaddress=host.private_ip.v4)
    dns::A(zone=clearwater.private_zone, resource="icscf.sprout", ipaddress=host.private_ip.v4)

    dns::Record(zone=clearwater.private_zone, resource="_sip._tcp.sprout", record_type="SRV", value="0 0 5054 {{host.name}}.")
    dns::Record(zone=clearwater.private_zone, resource="_sip._tcp.scscf.sprout", record_type="SRV", value="0 0 5054 {{host.name}}.")
    dns::Record(zone=clearwater.private_zone, resource="_sip._tcp.icscf.sprout", record_type="SRV", value="0 0 5052 {{host.name}}.")
end

implement Sprout using sproutMemento when memento
implement Sprout using sprout, clearwaterService, chronos
implement Sprout using sproutDNS when clearwater.create_dns_records

## Managed DNS
# By default each hosts adds its hostname to the private zone
implementation clearwaterDNS for ClearWater:
    dns::Record(zone=private_zone, resource="bono", record_type="NAPTR", value="1 1 \"S\" \"SIP+D2T\" \"\" _sip._tcp")
    dns::Record(zone=private_zone, resource="bono", record_type="NAPTR", value="1 2 \"S\" \"SIP+D2U\" \"\" _sip._udp")

    dns::Record(zone=private_zone, resource="sprout", record_type="NAPTR", value="1 1 \"S\" \"SIP+D2T\" \"\" _sip._tcp.sprout")
    dns::Record(zone=private_zone, resource="scscf.sprout", record_type="NAPTR", value="1 1 \"S\" \"SIP+D2T\" \"\" _sip._tcp.scscf.sprout")
    dns::Record(zone=private_zone, resource="icscf.sprout", record_type="NAPTR", value="1 1 \"S\" \"SIP+D2T\" \"\" _sip._tcp.icscf.sprout")

    dns::Record(zone=public_zone, resource="@", record_type="NAPTR", value="1 1 \"S\" \"SIP+D2T\" \"\" _sip._tcp")
    dns::Record(zone=public_zone, resource="@", record_type="NAPTR", value="1 2 \"S\" \"SIP+D2U\" \"\" _sip._udp")
end

implement ClearWater using clearwaterDNS when create_dns_records

implementation hostRecords for Host:
    dns::A(zone=clearwater.private_zone, resource="{{name}}.", ipaddress=ip)
end
implement Host using hostRecords when clearwater.create_dns_records



